<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git Cheatsheet</title>
    <url>/2019/11/12/git-cheatsheet/</url>
    <content><![CDATA[<blockquote>
<p>工欲善其事，必先利其器。</p>
</blockquote>
<p>Since this blog does not go through sufficient polishing period, there might be some mistakes or some outdated content, feel free to contact me for any <code>bug</code> you find. Thanks in advance!</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Git is a version control system used to facilitate the collaboration between multiple developers by using version control (everyone can controls their version to make sure all the features can be developed concurrently).  </p>
<p>If you are not familiar with basic operations of Git, then probably you can search for <code>git book</code> to learn more about Git basics. This blog will focus on the tricks and problems during my usage of Git in my daily work. </p>
<p>You may notice that several commands appear several times, this is the expected behavior since those commands will functions differently with different arguments. The <code>Git commands</code> part will introduce commands by functions, hence some commands might be diverged into different parts. </p>
<h2 id="Annotation-rule"><a href="#Annotation-rule" class="headerlink" title="Annotation rule"></a>Annotation rule</h2><p>words in <code>&lt;&gt;</code> is variable name</p>
<h2 id="git-commands"><a href="#git-commands" class="headerlink" title="git commands:"></a>git commands:</h2><h3 id="Simple-execution-normal-execution"><a href="#Simple-execution-normal-execution" class="headerlink" title="Simple execution (normal execution)"></a>Simple execution (normal execution)</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><ul>
<li><code>-a</code>: stage all the tracked files</li>
<li><code>-m</code>: attach the commit message in commit command, no need to enter text editor to type commit msg</li>
</ul>
<h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><ul>
<li>no arguments: the file will go away and not tracked</li>
<li><code>--cached</code>: still keep the file in hard drive but not have Git track </li>
</ul>
<h4 id="git-mv-seldomly-used"><a href="#git-mv-seldomly-used" class="headerlink" title="git mv: seldomly used"></a>git mv: seldomly used</h4><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><ul>
<li>no arguments: switch to an existing branch</li>
<li><code>-b</code>: switch to a new local branch with same file status of current branch </li>
</ul>
<h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><ul>
<li><code>-a &lt;tag-name&gt; -m &lt;tagging-msg&gt;</code>: create a tag with tagging msg</li>
<li><code>&lt;tag-name&gt;</code>: short command </li>
</ul>
<h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><ul>
<li><code>--global alias.&lt;alias-name&gt; &lt;command-name&gt;</code>: create alias for one command<br>  For example, <code>$ git config --global alias.last &#39;log -1 HEAD&#39;</code> will set <code>git last</code> to perform as <code>git log -1 HEAD</code></li>
</ul>
<h3 id="Checking-local-status"><a href="#Checking-local-status" class="headerlink" title="Checking local status"></a>Checking local status</h3><p>This part is like GET request in HTTP perspective, it will not do any changes to the file status, it will only check status </p>
<h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><ul>
<li>no arguments: see changes not yet staged</li>
<li><code>--staged</code> / <code>--cached</code>: staged changes that will go into last commit </li>
</ul>
<h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><ul>
<li>no arguments: display history only with commit msg and hash in reverse chronological order </li>
<li><code>--graph</code>: display branch and merge history in graph (tree)</li>
<li><code>--patch / -p</code>: display history with file change summary</li>
<li><code>-{number}</code>: display <code>number</code> logs</li>
<li><code>--stat</code>: display history with brief summary</li>
<li><code>--pretty={format}</code>: pre built-in format or customized format defined by us </li>
</ul>
<h4 id="git-tag-1"><a href="#git-tag-1" class="headerlink" title="git tag"></a>git tag</h4><ul>
<li>no arguments: list specific points in a repo’s history </li>
<li><code>-l &lt;tag-sub-name&gt;</code>: filter according to tag name </li>
</ul>
<h4 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h4><ul>
<li><code>&lt;tag-name&gt;</code>: show tag with commits </li>
</ul>
<h3 id="Error-handling-undo-after-abnormal-execution"><a href="#Error-handling-undo-after-abnormal-execution" class="headerlink" title="Error handling (undo after abnormal execution)"></a>Error handling (undo after abnormal execution)</h3><h4 id="When-executing-such-commands-be-careful-since-not-all-the-undo-operations-can-be-undoed-again"><a href="#When-executing-such-commands-be-careful-since-not-all-the-undo-operations-can-be-undoed-again" class="headerlink" title="When executing such commands, be careful since not all the undo operations can be undoed again"></a>When executing such commands, be careful since not all the undo operations can be undoed again</h4><p>It is quite annoying that sometimes you do the wrong operation and your local development branch becomes messy. Even worse you changes have been pushed to remote branch. </p>
<h4 id="git-commit-1"><a href="#git-commit-1" class="headerlink" title="git commit"></a>git commit</h4><ul>
<li><code>--amend</code>: undo the last commit, can add forgotten file or modify commit message </li>
</ul>
<h4 id="git-reset-this-could-be-a-dangerous-command-with-some-arguments-like-hard-since-you-probably-lose-your-work"><a href="#git-reset-this-could-be-a-dangerous-command-with-some-arguments-like-hard-since-you-probably-lose-your-work" class="headerlink" title="git reset (this could be a dangerous command with some arguments like --hard since you probably lose your work)"></a>git reset (this could be a dangerous command with some arguments like <code>--hard</code> since you probably lose your work)</h4><ul>
<li><code>HEAD &lt;file-name&gt;</code>: unstage a staged file </li>
<li></li>
</ul>
<h4 id="git-checkout-1"><a href="#git-checkout-1" class="headerlink" title="git checkout"></a>git checkout</h4><ul>
<li><code>-- &lt;file-name&gt; / &lt;file-name&gt;</code>: discard changes that you made to the file &lt;== could be dangerous</li>
</ul>
<h3 id="Work-with-remotes-Fetching-and-Uploading"><a href="#Work-with-remotes-Fetching-and-Uploading" class="headerlink" title="Work with remotes (Fetching and Uploading)"></a>Work with remotes (Fetching and Uploading)</h3><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><ul>
<li>no arguments: clone all the content in remote and add remote branch implicitly</li>
<li><code>-o &lt;remote-name&gt;</code>: default remote name is <code>origin</code>, can change to other names during clone process</li>
</ul>
<h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><ul>
<li>no arguments: check upstreaming branch </li>
<li><code>-v</code>: show full url of upstreaming branch(push and pull)</li>
<li><code>add &lt;short-name&gt; &lt;url&gt;</code>: add upstreaming branch explicitly </li>
<li><code>rename &lt;old-remote-name&gt; &lt;new-remote-name&gt;</code></li>
<li><code>remove &lt;short-name&gt;</code>: delete remote reference, all remote branches are also deleted </li>
<li><code>show origin</code>: remote branches</li>
</ul>
<h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><ul>
<li><code>&lt;remote-name&gt;</code>: fetch all info from remote, for example, <code>git fetch origin</code></li>
</ul>
<h4 id="git-pull-git-fetch-git-merge-from-upstreaming-branch"><a href="#git-pull-git-fetch-git-merge-from-upstreaming-branch" class="headerlink" title="git pull == git fetch + git merge from upstreaming branch"></a>git pull == git fetch + git merge from upstreaming branch</h4><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><ul>
<li>no arguments: push to the default remote branch </li>
<li><code>&lt;remote-name&gt; &lt;branch-name&gt;</code>: push to remote branch if local branch name and remote branch name are the same</li>
<li><code>&lt;remote-name&gt; &lt;local-branch-name&gt;:&lt;remote-branch-name&gt;</code>: push to remote branch if local branch name and remote branch name are different </li>
</ul>
<h4 id="git-checkout-2"><a href="#git-checkout-2" class="headerlink" title="git checkout"></a>git checkout</h4><ul>
<li><code>-b &lt;local-branch-name&gt;</code>: create a new branch and switch to it == git branch <branch-name> + git checkout <branch-name></li>
<li><code>-b &lt;local-branch-name&gt; &lt;remote-name&gt;/&lt;remote-branch-name&gt;</code>: create a local branch that sync with remote branch <remote-branch-name></li>
<li><code>--track &lt;remote-name&gt;/&lt;remote-branch-name&gt;</code>: set up current local branch to track remote branch with branch name <remote-branch-name></li>
</ul>
<h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><ul>
<li><code>&lt;branch-name&gt;</code>: merge another branch into current branch<ul>
<li>fast-forward: fast-forward simply means move the HEAD pointer forward  </li>
</ul>
</li>
</ul>
<h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><ul>
<li>no arguments: list all the local branches </li>
<li><code>-r</code>: list all the remote branches </li>
<li><code>-d &lt;branch-name&gt;</code>: delete branch </li>
<li><code>-D &lt;branch-name&gt;</code>: force delete branch (may lose changes)</li>
<li><code>-v</code>: see the last commit of each local branch </li>
<li><code>-vv</code>: list all local branches with tracking branch and <code>head</code> pointer info</li>
<li><code>--no-merged</code>: see the branches that contain unmerged commits </li>
<li><code>-u / --set-upsteam-to</code>: set upsteam branch </li>
</ul>
<h2 id="Git-branching"><a href="#Git-branching" class="headerlink" title="Git branching"></a>Git branching</h2><p>According to Git Book </p>
<blockquote>
<p>Branching means you diverge from the main line of development and continue to do work without messing with that main line. </p>
</blockquote>
<p>The statement from Git Book states the core concept of branching, which is to take care of personal development while still maintain the easy-to-merge connection with main line. </p>
<p>When git communicate between local repo and remote repo(GitHub or Gitlab), there are two protocols that it can use. <code>https</code> and <code>ssh</code> </p>
<p>alias of git</p>
<h2 id="Git-implementation"><a href="#Git-implementation" class="headerlink" title="Git implementation:"></a>Git implementation:</h2><p>Git stores its data as a sequence of snapchats of the whole filesystem. It does not copy the whole files but stores the reference of each file whenever user commits something. So the whole git history is like a stream of snapshots. </p>
<p>There are three types of files in git file system, <code>commit</code>, <code>tree</code> and <code>blob</code>. <code>Branch</code> is actually a pointer to different commits and moving the HEAD of each branch is actually changing the position of pointer, which is relatively lightweight and convenient compared to other VCS. <code>branch</code> is a file that contains the 40 character SHA-1 checksum of the commit that it points to. </p>
<p><code>fast-forward</code> is a concept that </p>
<p>One more thing: Comparison of Gitlab and GitHub </p>
<p>If you got any questions, feel free to contact me via any communication tools </p>
<p>Reference: </p>
<pre><code>1. https://git-scm.com/book/en/v2
</code></pre>]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>git, misc</tag>
      </tags>
  </entry>
  <entry>
    <title>🆕Hello World</title>
    <url>/2019/10/31/actual-hello-world/</url>
    <content><![CDATA[<p>写在十月的最后一天<br>希望自己可以坚持这个习惯 毕竟是进步（加薪）的不充分不必要条件（笑）<br>然而还是要认真一点的<br>毕竟自己是微博194粉的大V<br>下一篇blog，tech博主正式起航！</p>
<p>2019.10.31</p>
<p>最后夹带一点私货，anxl</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
